#include <iostream>
#include <string>

using namespace std;

int stringToInt(string s) {
	int j = 0, num = 0;
	while (s[j] >= 0x30 && s[j] <= 0x39) {
		num = num + (s[j] & 0x0F);
		if (s[j + 1] != 0) num = num * 10;
		j++;
	}
	return num;
}
string encrypting(string source) {
	string newStr;
	char alphabet[82] = { 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','!','?',' ','.',',','-','@','$','%','^','&','*','(',')','_','=','+','<','>','/','1','2','3','4','5','6','7','8','9','0'};
	string punk[82] = {"5660","5550","5440","5330","5220","5110","5000","4890","4780","4670","4560","4450","4340","4230","4120","4010","3900","3790","3680","3570","3460","3350","3240","3130","3020","2910","2800","2690","2580","2470","2360","2250","2140","2030","1920","1810","1700","1590","1480","1370","1260","1150","1040","0930","0820","0710","0600","0490","0380","0270","0160","0050","1234","2345","3456","4567","5678","6789","7890","0123","9999","9988","9977","9966","9955","9944","9933","9922","9911","9899","9888","9811","1101","2112","3123","4134","5145","6156","7167","8178","9189","1010"};
	for (int i = 0; i < source.length(); i++) {
		for (int j = 0; j <=82; j++) {
			if (source[i] == alphabet[j]) newStr.append(punk[j]);
		}
	}
	return newStr;
}
string decrypting(string crypted) {
	string source,temp;
	char alphabet[82] = { 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','!','?',' ','.',',','-','@','$','%','^','&','*','(',')','_','=','+','<','>','/','1','2','3','4','5','6','7','8','9','0' };
	string punk[82] = { "5660","5550","5440","5330","5220","5110","5000","4890","4780","4670","4560","4450","4340","4230","4120","4010","3900","3790","3680","3570","3460","3350","3240","3130","3020","2910","2800","2690","2580","2470","2360","2250","2140","2030","1920","1810","1700","1590","1480","1370","1260","1150","1040","0930","0820","0710","0600","0490","0380","0270","0160","0050","1234","2345","3456","4567","5678","6789","7890","0123","9999","9988","9977","9966","9955","9944","9933","9922","9911","9899","9888","9811","1101","2112","3123","4134","5145","6156","7167","8178","9189","1010" };
	for (int i = 0; i < crypted.length(); i++) {
		if (temp.length() <= 4) temp.push_back(crypted[i]);
		if (temp.length() == 4) {
			for (int j = 0; j < 82; j++) {
				if (stringToInt(temp) == stringToInt(punk[j])) source.push_back(alphabet[j]);
			}
			temp.clear();
		}
	}
	return source;
}
int main() {
	setlocale(LC_ALL, "Russian");
	int choise;
	string source,crypted;
	bool alive = true;
	while (alive == true) {
	cout << "Введите '1' чтобы зашифровать сообщение" << endl;
	cout << "Введите '2' чтобы расшифровать сообщение" << endl;
	cout << "Введите '0' для выхода" << endl;
	cout << "Выберите опцию: ";
	cin >> choise;
	cout << endl;
	cin.ignore(256, '\n');
		switch (choise) {
		case(1):
			cout << "Введите сообщение которое хотите зашифровать(russian symbols not supported): " << endl;
			getline(cin, source);
			cout << "Зашифрованное сообщение: " << encrypting(source) << endl;
			cout << endl;
			break;
		case(2):
			cout << "Введите зашифрованное сообщение: ";
			getline(cin, crypted);
			cout << "Расшифрованное сообщение: " << decrypting(crypted) << endl;
			cout << endl;
			break;
		case(0):
			return 0;
		default: 
			cout << "Нет такой опции" << endl;
			cout << endl;
		}
	}
	return 0;
}